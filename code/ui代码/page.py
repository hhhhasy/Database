# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'page.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
import i_rc
class Ui_Form(object):
    L=[]
    gb=[]
    me=None
    def setupUi(self, Form,db):
        Form.setObjectName("Form")
        Form.resize(1132, 712)
        self.lineEdit = QtWidgets.QLineEdit(Form)
        self.lineEdit.setGeometry(QtCore.QRect(60, 70, 113, 21))
        self.lineEdit.setStyleSheet("border:1px solid rgb(0,0,0);\n"
"border-radius:8px;")
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(Form)
        self.lineEdit_2.setGeometry(QtCore.QRect(230, 70, 113, 21))
        self.lineEdit_2.setStyleSheet("border:1px solid rgb(0,0,0);\n"
"border-radius:8px;")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(Form)
        self.lineEdit_3.setGeometry(QtCore.QRect(400, 70, 113, 21))
        self.lineEdit_3.setStyleSheet("border:1px solid rgb(0,0,0);\n"
"border-radius:8px;")
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_4 = QtWidgets.QLineEdit(Form)
        self.lineEdit_4.setGeometry(QtCore.QRect(560, 70, 113, 21))
        self.lineEdit_4.setStyleSheet("border:1px solid rgb(0,0,0);\n"
"border-radius:8px;")
        self.lineEdit_4.setObjectName("lineEdit_4")

        self.tableWidget = QtWidgets.QTableWidget(Form)
        self.tableWidget.setGeometry(QtCore.QRect(60, 150, 710, 511))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.buttonBox = QtWidgets.QDialogButtonBox(Form)
        self.buttonBox.setGeometry(QtCore.QRect(842, 100, 101, 31))
        self.buttonBox.setStyleSheet("border:1px solid rgb(0,0,0);\n"
"border-radius:8px;")
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(390, 10, 141, 41))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(830, 630, 93, 28))
        self.pushButton.setStyleSheet("border:1px solid rgb(0,0,0);\n"
"border-radius:8px;")
        self.pushButton.setObjectName("pushButton")

        self.pushButton_3 = QtWidgets.QPushButton(Form)
        self.pushButton_3.setGeometry(QtCore.QRect(1030, 630, 93, 28))
        self.pushButton_3.setStyleSheet("border:1px solid rgb(0,0,0);\n"
"border-radius:8px;")
        self.pushButton_3.setObjectName("pushButton_3")
        self.lineEdit_6 = QtWidgets.QLineEdit(Form)
        self.lineEdit_6.setGeometry(QtCore.QRect(870, 270, 191, 31))
        self.lineEdit_6.setStyleSheet("border:1px solid rgb(0,0,0);\n"
"border-radius:8px;")
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.pushButton_4 = QtWidgets.QPushButton(Form)
        self.pushButton_4.setGeometry(QtCore.QRect(920, 320, 93, 28))
        self.pushButton_4.setStyleSheet("border:1px solid rgb(0,0,0);\n"
"border-radius:8px;")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton.setStyleSheet("QPushButton{\n"
                                        "border:1px solid red;   /*边框的粗细，颜色*/\n"
                                        "border-radius:15px;    /*设置圆角半径 */\n"
                                        "padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
                                        "background-color: rgb(255, 0, 0);    /*背景颜色*/\n"
                                        "color:white;        /*字体颜色*/\n"
                                        "min-width:100px;    /*设置最小宽度*/\n"
                                        "min-height:100px;    /*设置最小高度*/\n"
                                        "font:bold 14px;        /*设置按钮文字和大小*/\n"
                                        "}")

        self.pushButton_3.setStyleSheet("QPushButton{\n"
                                        "border:1px solid red;   /*边框的粗细，颜色*/\n"
                                        "border-radius:15px;    /*设置圆角半径 */\n"
                                        "padding:2px 4px;  /*QFrame边框与内部其它部件的距离*/\n"
                                        "background-color: rgb(255, 0, 0);    /*背景颜色*/\n"
                                        "color:white;        /*字体颜色*/\n"
                                        "min-width:100px;    /*设置最小宽度*/\n"
                                        "min-height:100px;    /*设置最小高度*/\n"
                                        "font:bold 14px;        /*设置按钮文字和大小*/\n"
                                        "}")
        self.pushButton_3.setFixedSize(30, 30)

        self.pushButton.setFixedSize(30, 30)
        self.pushButton_3.setStyleSheet("border-image: url(:/image/image/information.jpg);")



        self.pushButton.setStyleSheet("border-image: url(:/image/image/list.jpg);")
        self.buttonBox.accepted.connect(lambda: self.search(db))
        self.buttonBox.rejected.connect(lambda :self.clear())
        self.pushButton_4.clicked.connect(lambda: self.goumai(db))


        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.lineEdit.setPlaceholderText(_translate("Form", "起始点"))
        self.lineEdit_2.setPlaceholderText(_translate("Form", "终点"))
        self.lineEdit_3.setPlaceholderText(_translate("Form", "最大价格"))
        self.lineEdit_4.setPlaceholderText(_translate("Form", "最低价格"))

        self.label.setText(_translate("Form", "搜索框🔍"))

        self.lineEdit_6.setPlaceholderText(_translate("Form", "输入编号进行购买"))
        self.pushButton_4.setText(_translate("Form", "购买"))
    def search(self,db):
        self.gb.clear()
        self.tableWidget.clear()
        cursor = db.cursor()
        str1= self.lineEdit.text()
        str2 = self.lineEdit_2.text()
        str3 = self.lineEdit_3.text()
        str4 = self.lineEdit_4.text()



        sql = "create or replace view piao as select 票编号,火车编号,价格,座位,发车时间,到达时间,车次 from 路线 natural join 成人票 " \
              "where valid='0' and 起始点='%s' and 终点='%s' and 价格< %s and 价格> %s " % (
            str1,str2,str3,str4)
        print(sql)
        if str1== '' or str2== ''or str3== ''or str4== '':
            msg_box = QMessageBox(QMessageBox.Critical, '错误', '请输入完整')
            msg_box.exec_()
        else:
            try:
                print(1)

                cursor.execute(sql)
                sql="select * from piao"
                cursor.execute(sql)
                results = cursor.fetchall()
                print(results)
                leng = len(results)
                for i in range(leng):
                    B = QPushButton('购买')
                    B.setStyleSheet('QPushButton{margin:3px};')
                    self.gb.append(B)
                    self.gb[i].clicked.connect(lambda: self.gou(db))

                self.tableWidget.setRowCount(leng)
                self.tableWidget.setColumnCount(5)
                self.tableWidget.setHorizontalHeaderLabels(['票编号', '火车编号', '价格','座位','是否购买'])
                for i in range(leng):
                    ietm1 = QTableWidgetItem(results[i][0])
                    ietm2 = QTableWidgetItem(results[i][1])
                    ietm3 = QTableWidgetItem(str(results[i][2]))
                    ietm4 = QTableWidgetItem(results[i][3])


                    self.tableWidget.setItem(i, 0, ietm1)
                    self.tableWidget.setItem(i, 1, ietm2)
                    self.tableWidget.setItem(i, 2, ietm3)
                    self.tableWidget.setItem(i, 3, ietm4)
                    self.tableWidget.setCellWidget(i, 4, self.gb[i])


            except:
                msg_box = QMessageBox(QMessageBox.Critical, '错误', '已没有该票')
                msg_box.exec_()


    def goumai(self, db):


        code = self.lineEdit_6.text()
        if (code == ''):
            msg_box = QMessageBox(QMessageBox.Critical, '错误', '请先输入')
            msg_box.exec_()
        else:
            sql = "select * from 成人票 where 票编号='%s' and valid=0" % (code)
            cursor = db.cursor()
            cursor.execute(sql)
            results = cursor.fetchall()

            if results == ():
                msg_box = QMessageBox(QMessageBox.Critical, '错误', '已没有该票')
                msg_box.exec_()
            else:
                sql = "update 成人票 set valid='1',身份证号='%s',账号='%s' where 票编号='%s'" % (self.me.id,self.me.zhanghao,code)

                cursor.execute(sql)
                db.commit()
                msg_box = QMessageBox(QMessageBox.Information, '正确', '成功购买')
                msg_box.exec_()
                self.L.append(code)


    def gou(self,db):
        index = self.tableWidget.currentRow()
        str0 = self.tableWidget.item(index, 0).text()

        if (str0 == ''):
            msg_box = QMessageBox(QMessageBox.Critical, '错误', '请先输入')
            msg_box.exec_()
        else:
            sql = "select * from 成人票 where 票编号='%s' and valid=0" % (str0)
            cursor = db.cursor()
            cursor.execute(sql)
            results = cursor.fetchall()

            if results == ():
                msg_box = QMessageBox(QMessageBox.Critical, '错误', '已没有该票')
                msg_box.exec_()
            else:

                sql = "update 成人票 set valid='1',身份证号='%s',账号='%s' where 票编号='%s'" % (self.me.id,self.me.zhanghao,str0)
                cursor.execute(sql)
                db.commit()
                msg_box = QMessageBox(QMessageBox.Information, '正确', '成功购买')
                msg_box.exec_()
                self.L.append(str0)

        self.gb.clear()
        self.tableWidget.clear()
        cursor = db.cursor()
        str1 = self.lineEdit.text()
        str2 = self.lineEdit_2.text()
        str3 = self.lineEdit_3.text()
        str4 = self.lineEdit_4.text()



        sql = "create or replace view piao as select " \
              "票编号,火车编号,价格,座位,发车时间,到达时间,车次 from 路线 natural join 成人票 " \
              "where valid='0' and 起始点='%s' and 终点='%s' and 价格< %s and 价格> %s " % (
            str1, str2, str3, str4)

        if str1 == '' or str2 == '' or str3 == '' or str4 == '' :
            msg_box = QMessageBox(QMessageBox.Critical, '错误', '请输入完整')
            msg_box.exec_()
        else:
            try:

                cursor.execute(sql)
                sql = "select * from piao"
                cursor.execute(sql)
                results = cursor.fetchall()
                print(results)
                leng = len(results)
                for i in range(leng):
                    B = QPushButton('购买')
                    B.setStyleSheet('QPushButton{margin:3px};')
                    self.gb.append(B)
                    self.gb[i].clicked.connect(lambda: self.gou(db))

                self.tableWidget.setRowCount(leng)
                self.tableWidget.setColumnCount(5)
                self.tableWidget.setHorizontalHeaderLabels(['票编号', '火车编号', '价格', '座位', '是否购买'])
                for i in range(leng):
                    ietm1 = QTableWidgetItem(results[i][0])
                    ietm2 = QTableWidgetItem(results[i][1])
                    ietm3 = QTableWidgetItem((str(results[i][2])))
                    ietm4 = QTableWidgetItem(results[i][3])

                    self.tableWidget.setItem(i, 0, ietm1)
                    self.tableWidget.setItem(i, 1, ietm2)
                    self.tableWidget.setItem(i, 2, ietm3)
                    self.tableWidget.setItem(i, 3, ietm4)
                    self.tableWidget.setCellWidget(i, 4, self.gb[i])


            except:
                msg_box = QMessageBox(QMessageBox.Critical, '错误', '已没有该票')
                msg_box.exec_()
    def trans(self,ui1,ui2):
        ui1.close()
        ui2.show()
    def clear(self):
        self.lineEdit.clear()
        self.lineEdit_2.clear()
        self.lineEdit_3.clear()
        self.lineEdit_4.clear()




